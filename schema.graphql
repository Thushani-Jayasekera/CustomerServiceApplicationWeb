# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Admin {
    email: String!
    id: ID!
    username: String!
}

type BudgetRange {
    lowerLimit: Float!
    upperLimit: Float!
}

type Complaint {
    complainer: User
    complaint: String!
    createdAt: DateTime!
    id: ID!
    title: String
    victim: String
}

type Conversation {
    createdAt: DateTime
    id: ID
    members: [ID]
}

type JobBid {
    bidBy: User
    detailedBreakdown: String
    id: ID!
    jobPosting: JobPosting
    proposedAmount: Float!
    proposedDate: DateTime!
    providerRating: Float
    providerReview: String
    requesterRating: Float
    requesterReview: String
    state: String
    updatedAt: DateTime
}

type JobPosting {
    budgetRange: BudgetRange
    category: String!
    description: String
    heading: String!
    id: ID!
    location: Location!
    postedBy: User!
    skills: [String]!
    state: String
    updatedAt: DateTime
}

type JobPostingFeed {
    cursor: String!
    hasNextPage: Boolean!
    jobPostings: [JobPosting]!
}

type Location {
    city: String!
    province: String!
    town: String!
}

type Message {
    body: String
    from: String
    to: String!
}

type Mutation {
    acceptJobBid(jobBidId: ID!, jobPostingId: ID!): JobBid!
    acceptServiceRequest(estimate: String, id: ID): ServiceRequest!
    addMessage(conversationID: ID, sender: ID, text: String): NewMessage
    addReviewToBid(id: ID, rating: Float, review: String, type: String): JobBid
    adminSignIn(email: String!, password: String!): String!
    adminSignUp(email: String!, password: String!, username: String!): String!
    approveServiceProvider(provider_id: ID): User!
    cancelServiceRequest(id: ID): ServiceRequest!
    changeStateJobBid(jobBidId: ID!, jobBidState: String!): JobBid!
    completeServiceRequest(finalAmount: Int, id: ID): ServiceRequest!
    createBiddingJob(date: String, image1: String, image2: String, image3: String, max_price: String, min_price: String, payMethod: String, task: String!, time: String): ServiceRequest!
    createJobBid(detailedBreakdown: String, jobPosting: ID!, proposedAmount: Float!, proposedDate: String!): JobBid!
    createJobPosting(category: String!, city: String!, description: String!, heading: String!, lowerLimit: Float!, payMethod: String, province: String!, skills: [String], town: String!, upperLimit: Float!): JobPosting!
    createService(description: String, image: String, service_name: String, user_type: String): Service!
    createServiceRequest(date: String, image1: String, image2: String, image3: String, location: String, max_price: String, min_price: String, payMethod: String, provider_id: ID, task: String!, time: String): ServiceRequest!
    customerfeedbackServiceRequest(customerRating: Int, customerReview: String, id: ID): ServiceRequest!
    editServiceRequest(id: ID, image1: String, image2: String, image3: String, task: String!): ServiceRequest!
    feedbackServiceRequest(id: ID, requestRating: Int, requestReview: String): ServiceRequest!
    makeComplaint(complainer: ID, complaint: String, title: String, victim: String): Complaint!
    makeMeServiceProvider(address: String!, bio: String, city: String!, contactNumber: String!, fullname: String!, nic: String!, profession: String!, province: String!, town: String!): User!
    newConverstion(recieverID: ID, senderID: ID): Conversation
    registerServiceRequester(address: String!, city: String!, contactNum: String!, postalCode: String!): User!
    rejectJobBid(jobBidId: ID!): JobBid
    rejectServiceRequest(id: ID): ServiceRequest!
    removeServiceProvider(id: ID): Boolean!
    rescheduleServiceRequest(date: String!, id: ID, time: String!): ServiceRequest!
    sendMessage(body: String, from: String, to: String): Message
    setProfileState(providerID: ID, state: String): User!
    signIn(email: String!, password: String!): String!
    signUp(email: String!, password: String!, username: String!): String!
    startServiceRequest(estimate: String, id: ID): ServiceRequest!
    suspendServiceProvider(provider_id: ID): User!
    updateMe(address: String, city: String, contactNum: String, fullname: String, postalCode: String, profession: String, profile_url: String, province: String, town: String): User
}

type NewMessage {
    conversationID: ID
    createdAt: DateTime
    id: ID
    sender: ID
    text: String
}

type Query {
    acceptedServiceRequestsForMe: [ServiceRequest!]
    acceptedServiceRequestsbyMe: [ServiceRequest!]
    canceledServiceRequestsForMe: [ServiceRequest!]
    canceledServiceRequestsbyMe: [ServiceRequest!]
    completedServiceRequestsForMe: [ServiceRequest!]
    completedServiceRequestsbyMe: [ServiceRequest!]
    conversationsOfUser: [Conversation]
    getJobBidById(id: ID!): JobBid!
    getMyBids(state: String): [JobBid]
    getMyJobPostingBids(id: ID!): [JobBid]
    getMyJobPostings(state: String!): [JobPosting]
    getNewMessages(conversationID: ID): [NewMessage]
    getServiceRequestByID(id: ID!): ServiceRequest!
    getUserbyId(id: ID!): User!
    jobPosting(id: ID!): JobPosting!
    jobPostingFeed(category: String!, city: String!, cursor: String, province: String!, town: String!): JobPostingFeed
    jobs: [JobPosting]
    me: User!
    pendingServiceRequestsForMe: [ServiceRequest!]
    pendingServiceRequestsbyMe: [ServiceRequest!]
    rejectedServiceRequestsForMe: [ServiceRequest!]
    rejectedServiceRequestsbyMe: [ServiceRequest!]
    reviewedServiceRequestsForMe: [ServiceRequest!]
    reviewedServiceRequestsbyMe: [ServiceRequest!]
    searchServiceProviderbyName(name: String!): [User!]!
    searchServiceProviderbyProfession(profession: String!): [User!]!
    searchServiceProviderbyProfessioninProvince(city: String, profession: String!, province: String, rating: String): [User!]!
    startedServiceRequestsForMe: [ServiceRequest!]
    startedServiceRequestsbyMe: [ServiceRequest!]
    takeServiceProviders: [User!]!
    takeUsers(accountState: String!): [User!]!
    users: [User!]!
    viewAllComplaints: [Complaint!]!
    viewAllServiceProviders: [User!]!
    viewAllServiceTypes: [Service]
    viewAllServices: [Service!]!
}

type Rating {
    providerRating: Float
    requesterRating: Float
}

type Service {
    description: String!
    id: ID!
    image: String
    service_name: String!
    user_type: String!
}

type ServiceRequest {
    customerRating: Int
    customerReview: String
    date: String
    estimate: String
    id: ID!
    image1: String
    image2: String
    image3: String
    location: String
    max_price: String
    min_price: String
    payMethod: String
    provider_id: ID
    requestRating: Int
    requestReview: String
    requester_id: ID
    state: String
    task: String!
    time: String
    toDatePayment: String
}

type User {
    address: String
    bio: String
    city: String
    contactNum: String
    email: String!
    fullname: String
    id: ID!
    nic: String
    postalCode: String
    profession: String
    profile_state: String
    profile_url: String
    provider_rating: String
    provider_review_count: String
    province: String
    rating: Rating
    requester_rating: String
    roles: [String]
    service_providing_status: Boolean
    town: String
    username: String!
}


"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime